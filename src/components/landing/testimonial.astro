---
// Testimonials.astro

// En tu archivo testimonial.astro
interface Testimonial {
  name: string;
  text: string;
  role?: string;
  image?: string;
}

interface CTA {
  title: string;
  description: string;
  primaryButtonText: string;
  primaryButtonURL: string;
  secondaryButtonText: string;
  secondaryButtonURL: string;
}

interface Props {
  title: string;
  testimonials: Testimonial[];
  cta: CTA;
}

const { title, testimonials, cta } = Astro.props;
---

<style>
  /* Estilos base que ya tenías */
  .hero-custom-shape {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100px;
    background: white;
    border-radius: 100% 100% 0 0 / 100px;
  }

  h1.hero-title {
    font-family: 'Poppins', sans-serif;
    font-weight: 800;
    letter-spacing: -0.03em;
    font-size: 3.2rem;
    line-height: 1.2;
    margin-bottom: 1.5rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  p.hero-subtitle {
    font-family: 'Inter', sans-serif;
    font-weight: 400;
    font-size: 1.5rem;
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Estilos responsive para la imagen */
  .hero-image {
    max-width: 100%;
    height: auto;
    width: 600px;
  }

  /* Contenedor de la imagen con márgenes */
  .hero-image-container {
    padding: 15px;
    margin: 10px;
  }

  /* NUEVOS ESTILOS PARA H2, H3 Y TEXTOS */

  /* Estilos para h2 - títulos de sección */
  h2.section-title {
    font-family: 'Poppins', sans-serif;
    font-weight: 700;
    font-size: 2.4rem;
    letter-spacing: -0.02em;
    line-height: 1.3;
    margin-bottom: 1.2rem;
    position: relative;
    color: #263238;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  /* Efecto subrayado opcional para h2 */
  h2.section-title.underlined::after {
    content: '';
    position: absolute;
    bottom: -18px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(to right, #10b981, #059669);
    border-radius: 2px;
    bottom: -18px; /* Mantener la línea en la misma posición relativa al texto */
  }

  h2.section-title.underlined {
    margin-bottom: 3.5rem; /* Aumentar el margen inferior total del h2 */
  }

  /* Variante de h2 alineado a la izquierda */
  h2.section-title.left-aligned::after {
    left: 0;
    transform: none;
  }

  /* Estilos para h3 - subtítulos */
  h3.subsection-title {
    font-family: 'Poppins', sans-serif;
    font-weight: 400;
    font-size: 1.4rem;
    letter-spacing: -0.01em;
    line-height: 1.4;
    margin-bottom: 1rem;
    color: #374151;
  }

  /* Variante con acento de color */
  h3.subsection-title.accented {
    position: relative;
    display: inline-block;
    padding-left: 1rem;
  }

  h3.subsection-title.accented::before {
    content: '';
    position: absolute;
    left: 0;
    top: 10%;
    height: 80%;
    width: 4px;
    background-color: #10b981;
    border-radius: 2px;
  }

  /* Estilos para párrafos de contenido */
  p.content-text {
    font-family: 'Inter', sans-serif;
    font-weight: 400;
    font-size: 1.3rem;
    line-height: 1.7;
    color: #4b5563;
    margin-bottom: 1.2rem;
  }

  /* Variante para texto destacado */
  p.content-text.highlighted {
    font-weight: 500;
    color: #111827;
  }

  /* Clase para citas o testimonios */
  .testimonial-text {
    font-family: 'Inter', sans-serif;
    font-style: italic;
    font-size: 1.25rem;
    line-height: 1.7;
    color: #4b5563;
    padding: 0; /* Eliminar el padding que dejaba espacio para las comillas */
    text-align: center;
    margin-bottom: 1.5rem;
  }

  /* Eliminar las comillas que se generan con pseudo-elementos */
  .testimonial-text::before,
  .testimonial-text::after {
    content: none; /* Esto elimina las comillas */
  }

  .testimonial-author {
    font-weight: 600;
    font-size: 1.2rem;
    color: #111827;
  }

  .testimonial-role {
    font-size: 1rem;
    color: #6b7280;
    margin-top: 0.25rem;
  }

  /* Estilos para listas */
  ul.feature-list {
    list-style: none;
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }

  ul.feature-list li {
    position: relative;
    font-family: 'Inter', sans-serif;
    padding-left: 1.5rem;
    margin-bottom: 0.75rem;
    line-height: 1.6;
  }

  ul.feature-list li::before {
    content: '✓';
    position: absolute;
    left: 0;
    color: #10b981;
    font-weight: bold;
  }

  /* Efecto de gradiente para textos especiales */
  .gradient-text {
    background: linear-gradient(90deg, #10b981, #0891b2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
    display: inline-block;
  }

  /* Media query para dispositivos móviles */
  @media (max-width: 640px) {
    h1.hero-title {
      font-size: 2rem;
    }

    p.hero-subtitle {
      font-size: 1.1rem;
    }

    h2.section-title {
      font-size: 1.8rem;
    }

    h3.subsection-title {
      font-size: 1.4rem;
    }

    p.content-text,
    p.testimonial-text {
      font-size: 1.2rem;
    }

    /* Ajuste de márgenes para móviles */
    .hero-image-container {
      padding: 10px;
      margin: 5px;
    }
  }
</style>

<section class="bg-gray-50 py-8">
  <div class="container mx-auto max-w-6xl px-6">
    <h2 class="section-title underlined text-center mb-12">
      {title}
    </h2>

    <div class="testimonials-slider relative">
      {/*  Contenedor del carrusel */}
      <div class="testimonials-wrapper overflow-hidden">
        <div class="testimonials-container flex transition-transform duration-500 ease-in-out">
          {/* Clones al final para el efecto infinito */}
          {
            testimonials.length > 0 && (
              <>
                {/* Clonar los últimos elementos para el principio */}
                {testimonials.slice(-3).map((testimonial, index) => (
                  <div class="testimonial-slide clone-before w-full md:w-1/3 flex-shrink-0 px-4">
                    <div class="bg-white p-8 rounded-lg border border-gray-100 h-full testimonial-card">
                      <blockquote>
                        {/*  Para el texto del testimonio */}
                        <p class="testimonial-text text-center">{testimonial.text}</p>

                        {/*  Para el nombre y el rol */}
                        <footer class="text-center">
                          <p class="testimonial-author">
                            {testimonial.name}
                            {testimonial.role && (
                              <span class="testimonial-role block">{testimonial.role}</span>
                            )}
                          </p>
                        </footer>
                      </blockquote>
                    </div>
                  </div>
                ))}

                {/* Los elementos originales */}
                {testimonials.map((testimonial, index) => (
                  <div class="testimonial-slide original w-full md:w-1/3 flex-shrink-0 px-4">
                    <div
                      class="bg-white p-8 rounded-lg border border-gray-100 h-full testimonial-card"
                      data-index={index}
                    >
                      <blockquote>
                        {/*  Para el texto del testimonio */}
                        <p class="testimonial-text text-center">{testimonial.text}</p>

                        {/*  Para el nombre y el rol */}
                        <footer class="text-center">
                          <p class="testimonial-author">
                            {testimonial.name}
                            {testimonial.role && (
                              <span class="testimonial-role block">{testimonial.role}</span>
                            )}
                          </p>
                        </footer>
                      </blockquote>
                    </div>
                  </div>
                ))}

                {/* Clonar los primeros elementos para el final */}
                {testimonials.slice(0, 3).map((testimonial, index) => (
                  <div class="testimonial-slide clone-after w-full md:w-1/3 flex-shrink-0 px-4">
                    <div class="bg-white p-8 rounded-lg border border-gray-100 h-full testimonial-card">
                      <blockquote>
                        {/*  Para el texto del testimonio */}
                        <p class="testimonial-text text-center">{testimonial.text}</p>

                        {/* Para el nombre y el rol */}
                        <footer class="text-center">
                          <p class="testimonial-author">
                            {testimonial.name}
                            {testimonial.role && (
                              <span class="testimonial-role block">{testimonial.role}</span>
                            )}
                          </p>
                        </footer>
                      </blockquote>
                    </div>
                  </div>
                ))}
              </>
            )
          }
        </div>
      </div>

      {/*  Controles de navegación */}
      {
        testimonials.length > 1 && (
          <>
            {/*  Ocultar botones completamente en móvil */}
            <button class="testimonial-prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-white rounded-full shadow-md w-10 h-10 items-center justify-center z-10 hover:bg-gray-100 focus:outline-none md:left-0 hidden md:flex">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-gray-700"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 19l-7-7 7-7"
                />
              </svg>
            </button>
            <button class="testimonial-next absolute top-1/2 right-4 transform -translate-y-1/2 bg-white rounded-full shadow-md w-10 h-10 items-center justify-center z-10 hover:bg-gray-100 focus:outline-none md:right-0 hidden md:flex">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-gray-700"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </button>
            {/* 
      {/*  Indicadores de posición (solo visibles en desktop) */}
            <div class="testimonial-indicators hidden md:flex justify-center mt-8 gap-3">
              {testimonials.map((_, index) => (
                <button
                  class="testimonial-indicator w-2.5 h-2.5 rounded-full bg-gray-300 hover:bg-emerald-500 transition-colors duration-200"
                  data-index={index}
                />
              ))}
            </div>

            {/*  Barra de progreso (solo para móvil - versión simplificada) */}
            <div class="progress-container flex justify-center gap-2 mt-4 md:hidden">
              {testimonials.map((_, index) => (
                <div
                  class={`progress-bar h-1 rounded-full transition-all duration-300 ${index === 0 ? 'w-24 bg-emerald-500' : 'w-6 bg-gray-300'}`}
                  data-index={index}
                />
              ))}
            </div>
          </>
        )
      }

      {
        cta && (
          <div class="mt-16 w-full">
            <div class="bg-emerald-50 border-l-4 border-emerald-500 rounded-lg p-8 shadow-sm">
              <h3 class="text-2xl font-bold text-emerald-700 mb-4 font-[Poppins]">{cta.title}</h3>

              <p class="text-gray-700 text-lg mb-6 font-[Inter] leading-relaxed">
                {cta.description}
              </p>

              <div class="flex flex-col sm:flex-row gap-4">
                <a
                  href={cta.primaryButtonURL}
                  class="flex-1 px-6 py-3 text-center bg-emerald-600 text-white font-semibold rounded-lg hover:bg-emerald-700 transition-colors duration-300 shadow-md"
                >
                  {cta.primaryButtonText}
                </a>

                <a
                  href={cta.secondaryButtonURL}
                  class="flex-1 px-6 py-3 text-center border-2 border-emerald-600 text-emerald-700 font-semibold rounded-lg hover:bg-emerald-100 transition-colors duration-300"
                >
                  {cta.secondaryButtonText}
                </a>
              </div>
            </div>
          </div>
        )
      }
    </div>
  </div>
</section>

<style>
  .testimonial-card.active {
    border-color: #10b981;
    border-width: 2px;
  }
</style>

<script>
  // Script para manejar el carrusel infinito
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.testimonials-container') as HTMLElement;
    const prevButton = document.querySelector('.testimonial-prev') as HTMLButtonElement;
    const nextButton = document.querySelector('.testimonial-next') as HTMLButtonElement;
    const indicators = document.querySelectorAll('.testimonial-indicator');
    const originalSlides = document.querySelectorAll('.testimonial-slide.original');
    const allSlides = document.querySelectorAll('.testimonial-slide');
    const testimonialCards = document.querySelectorAll('.testimonial-card[data-index]');
    const progressBars = document.querySelectorAll('.progress-bar');

    // Si no hay testimonios, no hacemos nada
    if (originalSlides.length <= 0) return;

    const totalSlides = originalSlides.length;
    let slidesPerView = window.innerWidth < 768 ? 1 : Math.min(3, totalSlides);

    // Configuración inicial: posicionamos en el primer slide real (después de los clones)
    let currentIndex = 0;
    let offset = 3; // Número de slides clonados al principio

    // Función para actualizar el carrusel
    const updateSlider = (skipTransition = false) => {
      if (!container) return;

      // Si se solicita omitir la transición
      if (skipTransition) {
        container.style.transition = 'none';
      } else {
        container.style.transition = 'transform 500ms ease-in-out';
      }

      const slideWidth = 100 / slidesPerView;
      // Calculamos la posición considerando el offset de los clones
      container.style.transform = `translateX(-${(currentIndex + offset) * slideWidth}%)`;

      // Calcular el índice real (para los indicadores)
      const realIndex = ((currentIndex % totalSlides) + totalSlides) % totalSlides;

      // Actualizar indicadores activos
      indicators.forEach((indicator, i) => {
        if (i === realIndex) {
          indicator.classList.add('bg-emerald-500');
          indicator.classList.remove('bg-gray-300');
        } else {
          indicator.classList.add('bg-gray-300');
          indicator.classList.remove('bg-emerald-500');
        }
      });

      // Actualizar tarjetas activas
      testimonialCards.forEach((card, i) => {
        if (parseInt(card.getAttribute('data-index') || '0') === realIndex) {
          card.classList.add('active');
        } else {
          card.classList.remove('active');
        }
      });

      // Actualizar barras de progreso en móvil
      progressBars.forEach((bar, i) => {
        if (i === realIndex) {
          bar.classList.add('w-24', 'bg-emerald-500');
          bar.classList.remove('w-6', 'bg-gray-300');
        } else {
          bar.classList.add('w-6', 'bg-gray-300');
          bar.classList.remove('w-24', 'bg-emerald-500');
        }
      });
    };

    // Para lograr el efecto infinito, tenemos que manejar los saltos
    const handleInfiniteScroll = () => {
      // Si llegamos al final, saltamos al inicio
      if (currentIndex >= totalSlides) {
        setTimeout(() => {
          currentIndex = 0;
          updateSlider(true);
        }, 500); // Esperamos a que termine la transición
      }

      // Si vamos hacia atrás del inicio, saltamos al final
      if (currentIndex < 0) {
        setTimeout(() => {
          currentIndex = totalSlides - 1;
          updateSlider(true);
        }, 500); // Esperamos a que termine la transición
      }
    };

    // Configuración inicial
    const initSlider = () => {
      slidesPerView = window.innerWidth < 768 ? 1 : Math.min(3, totalSlides);

      // Ajustar ancho de todos los slides
      allSlides.forEach((slide) => {
        (slide as HTMLElement).style.width = `${100 / slidesPerView}%`;
      });

      // Posicionar inicialmente en el primer slide real
      updateSlider(true);

      // Activar las transiciones después de posicionar
      setTimeout(() => {
        container.style.transition = 'transform 500ms ease-in-out';
      }, 50);
    };

    // Eventos de navegación
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        currentIndex--;
        updateSlider();
        handleInfiniteScroll();
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        currentIndex++;
        updateSlider();
        handleInfiniteScroll();
      });
    }

    // Eventos de indicadores
    indicators.forEach((indicator, i) => {
      indicator.addEventListener('click', () => {
        currentIndex = i;
        updateSlider();
      });
    });

    // Adaptarse a cambios de tamaño de pantalla
    window.addEventListener('resize', initSlider);

    // Activar rotación automática continua
    let autoplayInterval = setInterval(() => {
      currentIndex++;
      updateSlider();
      handleInfiniteScroll();
    }, 4000);

    // Pausar rotación al interactuar
    const sliderElement = document.querySelector('.testimonials-slider') as HTMLElement;
    if (sliderElement) {
      sliderElement.addEventListener('mouseenter', () => {
        clearInterval(autoplayInterval);
      });

      sliderElement.addEventListener('mouseleave', () => {
        autoplayInterval = setInterval(() => {
          currentIndex++;
          updateSlider();
          handleInfiniteScroll();
        }, 4000);
      });
    }

    // Inicializar
    initSlider();

    // Marcar el segundo testimonio como activo inicialmente (para coincidir con tu diseño)
    if (totalSlides > 1) {
      setTimeout(() => {
        currentIndex = 1;
        updateSlider();
      }, 500);
    }
  });
</script>
