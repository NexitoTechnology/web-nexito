---
// src/components/testimonials_section.astro

import { getCollection, type CollectionEntry } from 'astro:content';
import JsonLD from './JsonLD.astro';

const testimonials = await getCollection('testimonials');
const sortedTestimonials = testimonials.sort((a: CollectionEntry<'testimonials'>, b: CollectionEntry<'testimonials'>) => 
  a.data.order - b.data.order
);

interface Metric {
  value: string;
  label: string;
}

// Asegurar que siempre haya al menos 1 testimonio para los counts
const reviewCount = sortedTestimonials.length || 1;
const ratingCount = sortedTestimonials.length || 1;

// Schema correcto para los testimonios
const testimonialSchema = {
  "@context": "https://schema.org/",
  "@type": "Product",
  "name": "Nexito Technology Services",
  "description": "Servicios de automatización e inteligencia artificial para empresas",
  "brand": {
    "@type": "Brand",
    "name": "Nexito Technology"
  },
  "review": sortedTestimonials.map((testimonial) => ({
    "@type": "Review",
    "reviewRating": {
      "@type": "Rating",
      "ratingValue": "5",
      "bestRating": "5",
      "worstRating": "1"
    },
    "author": {
      "@type": "Person",
      "name": testimonial.data.name,
      "jobTitle": testimonial.data.role,
      "worksFor": {
        "@type": "Organization",
        "name": testimonial.data.company
      }
    },
    "datePublished": new Date().toISOString().split('T')[0],
    "reviewBody": testimonial.data.quote
  })),
  "aggregateRating": {
    "@type": "AggregateRating",
    "ratingValue": "5",
    "bestRating": "5",
    "worstRating": "1",
    "ratingCount": ratingCount,
    "reviewCount": reviewCount
  }
};
---

<section class="py-14 md:py-14 bg-gradient-to-b from-gray-50 to-white relative overflow-hidden">
  <JsonLD type="Product" data={testimonialSchema} />
 
 <!-- Fondo con patrón -->
 <div class="absolute inset-0 bg-grid-slate-900/[0.04] bg-[size:20px_20px]"></div>
 
 <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
   <!-- Header mejorado -->
   <div class="text-center max-w-3xl mx-auto mb-20">
     <span class="text-blue-800 font-medium bg-blue-200 inline-block mb-4 px-4 py-1.5 rounded-full text-sm">
       Testimonios
     </span>
     <h2 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
       Lo que Dicen Nuestros <span class="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-blue-800">Clientes</span>
     </h2>
     <p class="text-xl text-gray-600">
       Descubre cómo hemos ayudado a otras empresas a alcanzar sus objetivos
     </p>
   </div>

   <!-- Carrusel mejorado -->
   <div class="testimonials-carousel relative">
     <div class="overflow-hidden">
       <div id="testimonials-container" class="flex transition-transform duration-500 ease-in-out">
         {sortedTestimonials.map((testimonial) => (
           <div class="w-full lg:w-1/3 flex-shrink-0 px-4 transition-opacity duration-500">
             <div class="bg-white rounded-2xl shadow-xl p-8 h-full hover:shadow-2xl transition-all duration-300 border border-gray-100">
               <!-- Quote icon -->
               <div class="mb-6">
                 <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                   <svg class="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                     <path d="M4.583 17.321C3.553 16.227 3 15 3 13.011c0-3.5 2.457-6.637 6.03-8.188l.893 1.378c-3.335 1.804-3.987 4.145-4.247 5.621.537-.278 1.24-.375 1.929-.311 1.804.167 3.226 1.648 3.226 3.489a3.5 3.5 0 01-3.5 3.5c-1.073 0-2.099-.49-2.748-1.179zm10 0C13.553 16.227 13 15 13 13.011c0-3.5 2.457-6.637 6.03-8.188l.893 1.378c-3.335 1.804-3.987 4.145-4.247 5.621.537-.278 1.24-.375 1.929-.311 1.804.167 3.226 1.648 3.226 3.489a3.5 3.5 0 01-3.5 3.5c-1.073 0-2.099-.49-2.748-1.179z"/>
                   </svg>
                 </div>
               </div>
   
               <blockquote class="mb-8">
                 <p class="text-gray-700 text-lg leading-relaxed">{testimonial.data.quote}</p>
               </blockquote>
   
               <div class="flex justify-between items-center">
                 <div class="flex items-center">
                   <div class="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center text-white font-bold">
                     {testimonial.data.name[0]}
                   </div>
                   <div class="ml-4">
                     <p class="font-bold text-gray-900">{testimonial.data.name}</p>
                     <p class="text-gray-600">{testimonial.data.role}</p>
                     <p class="text-sm text-gray-500">{testimonial.data.company}</p>
                   </div>
                 </div>

                 {testimonial.data.metrics && (
                   <div class="flex flex-col gap-2">
                     {testimonial.data.metrics.map((metric) => (
                       <div class="text-right">
                         <div class="text-xl font-bold text-blue-600">{metric.value}</div>
                         <div class="text-sm text-gray-500">{metric.label}</div>
                       </div>
                     ))}
                   </div>
                 )}
               </div>
             </div>
           </div>
         ))}
       </div>
     </div>

     <!-- Controles del carrusel -->
     <button
       id="prev"
       class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/90 backdrop-blur-sm rounded-full p-3 shadow-lg hover:bg-blue-50 transition-all z-10"
       aria-label="Anterior"
     >
       <svg class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
       </svg>
     </button>

     <button
       id="next"
       class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/90 backdrop-blur-sm rounded-full p-3 shadow-lg hover:bg-blue-50 transition-all z-10"
       aria-label="Siguiente"
     >
       <svg class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
       </svg>
     </button>
   </div>
 </div>
</section>

<script>
 function setupCarousel() {
   const container = document.getElementById('testimonials-container');
   if (!container) return;

   let currentIndex = 0;
   const items = container.children;
   const itemCount = items.length;
   
   function getItemsPerView() {
     return window.innerWidth >= 1024 ? 3 : 1;
   }

   function getMaxIndex() {
     return Math.max(0, itemCount - getItemsPerView());
   }

   function updateCarousel() {
     if (!container) return;
     const itemsPerView = getItemsPerView();
     
     const itemWidth = 100 / itemsPerView;
     const offset = currentIndex * -itemWidth;
     
     container.style.transform = `translateX(${offset}%)`;
     
     Array.from(items).forEach((item, index) => {
       const isVisible = index >= currentIndex && index < currentIndex + itemsPerView;
       const htmlItem = item as HTMLElement;
       htmlItem.style.opacity = isVisible ? '1' : '0';
       htmlItem.style.pointerEvents = isVisible ? 'auto' : 'none';
     });

     const prevButton = document.getElementById('prev') as HTMLButtonElement | null;
     const nextButton = document.getElementById('next') as HTMLButtonElement | null;

     if (prevButton) {
       prevButton.disabled = currentIndex === 0;
       prevButton.classList.toggle('opacity-50', currentIndex === 0);
     }
     if (nextButton) {
       nextButton.disabled = currentIndex === getMaxIndex();
       nextButton.classList.toggle('opacity-50', currentIndex === getMaxIndex());
     }
   }

   const prevButton = document.getElementById('prev');
   const nextButton = document.getElementById('next');

   prevButton?.addEventListener('click', () => {
     if (currentIndex > 0) {
       currentIndex--;
       updateCarousel();
     }
   });

   nextButton?.addEventListener('click', () => {
     if (currentIndex < getMaxIndex()) {
       currentIndex++;
       updateCarousel();
     }
   });

   let interval = setInterval(() => {
     if (currentIndex === getMaxIndex()) {
       currentIndex = 0;
     } else {
       currentIndex = Math.min(getMaxIndex(), currentIndex + 1);
     }
     updateCarousel();
   }, 5000);

   const handleResize = () => {
     currentIndex = Math.min(currentIndex, getMaxIndex());
     updateCarousel();
   };

   window.addEventListener('resize', handleResize);

   updateCarousel();

   return () => {
     clearInterval(interval);
     window.removeEventListener('resize', handleResize);
   };
 }

 setupCarousel();
 document.addEventListener('astro:page-load', setupCarousel);
</script>